name: Build & Publish wheels
on:
  workflow_dispatch


jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    environment: release
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: install ISPC
        uses: ispc/install-ispc-action@main

      - name: Build sdist
        run: pipx run build --sdist
      
      - name: Install sdist
        run: pip install dist/*.tar.gz

      - uses: actions/upload-artifact@v4
        with:
          name: "sdist"
          path: dist/*.tar.gz
  
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    environment: release
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-13, macos-14, ubuntu-latest, ubuntu-24.04-arm]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install ISPC
        uses: ispc/install-ispc-action@main
      
      - name: Prebuild x86-64
        if: matrix.os == 'windows-latest' || matrix.os == 'ubuntu-latest' || matrix.os == 'macos-13'
        run: >
          mkdir ispc_texcomp_x86-64 &&
          ispc -O2 src/ISPCTextureCompressor/ispc_texcomp/kernel.ispc -o ispc_texcomp_x86-64/kernel.o -h ispc_texcomp_x86-64/kernel_ispc.h --opt=fast-math --pic --arch=x86-64 --target=sse2-i32x4,sse4.1-i32x4,avx1-i32x4,avx2-i32x4 &&
          ispc -O2 src/ISPCTextureCompressor/ispc_texcomp/kernel_astc.ispc -o ispc_texcomp_x86-64/kernel_astc.o -h ispc_texcomp_x86-64/kernel_astc_ispc.h --opt=fast-math --pic --arch=x86-64 --target=sse2-i32x4,sse4.2-i32x4,avx1-i32x4,avx2-i32x4

      - name: Prebuild x86
        if: matrix.os == 'windows-latest' || matrix.os == 'ubuntu-latest'
        run: >
          mkdir ispc_texcomp_x86 &&
          ispc -O2 src/ISPCTextureCompressor/ispc_texcomp/kernel.ispc -o ispc_texcomp_x86/kernel.o -h ispc_texcomp_x86/kernel_ispc.h --opt=fast-math --pic --arch=x86 --target=sse2-i32x4,sse4.1-i32x4 &&
          ispc -O2 src/ISPCTextureCompressor/ispc_texcomp/kernel_astc.ispc -o ispc_texcomp_x86/kernel_astc.o -h ispc_texcomp_x86/kernel_astc_ispc.h --opt=fast-math --pic --arch=x86 --target=sse2-i32x4,sse4.1-i32x4
      
      - name: Prebuild aarch64
        if: matrix.os == 'windows-latest' || matrix.os == 'ubuntu-24.04-arm' || matrix.os == 'macos-14'
        run:
          mkdir ispc_texcomp_aarch64 &&
          ispc -O2 src/ISPCTextureCompressor/ispc_texcomp/kernel.ispc -o ispc_texcomp_aarch64/kernel.o -h ispc_texcomp_aarch64/kernel_ispc.h --opt=fast-math --pic --arch=aarch64 --target=neon-i32x4 &&
          ispc -O2 src/ISPCTextureCompressor/ispc_texcomp/kernel_astc.ispc -o ispc_texcomp_aarch64/kernel_astc.o -h ispc_texcomp_aarch64/kernel_astc_ispc.h --opt=fast-math --pic --arch=aarch64 --target=neon-i32x4

      - name: Prebuild arm
        if: matrix.os == 'ubuntu-24.04-arm'
        run:
          mkdir ispc_texcomp_arm &&
          ispc -O2 src/ISPCTextureCompressor/ispc_texcomp/kernel.ispc -o ispc_texcomp_arm/kernel.o -h ispc_texcomp_arm/kernel_ispc.h --opt=fast-math --pic --arch=arm --target=neon-i32x4 &&
          ispc -O2 src/ISPCTextureCompressor/ispc_texcomp/kernel_astc.ispc -o ispc_texcomp_arm/kernel_astc.o -h ispc_texcomp_arm/kernel_astc_ispc.h --opt=fast-math --pic --arch=arm --target=neon-i32x4

      - name: Build wheels
        uses: joerick/cibuildwheel@v2.21.2
        env:
          CIBW_BUILD: "cp311-win* cp311-macosx_x86_64 cp311-macosx_arm64 cp311-*linux_x86_64 cp311-*linux_i686 cp311-*linux_aarch64 cp311-*linux_armv7l"
          CIBW_ARCHS_MACOS: ${{ matrix.os == 'macos-13' && 'x86_64' || 'arm64' }}
          CIBW_ARCHS_LINUX: ${{ matrix.os == 'ubuntu-latest' && 'x86_64 i686' || 'aarch64 armv7l' }}
          CIBW_ARCHS_WINDOWS: "AMD64 x86 ARM64"
          CIBW_ENVIRONMENT: CIBUILDWHEEL=1
          CIBW_TEST_SKIP: "*"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            auditwheel repair -w {dest_dir} {wheel} &&
            pipx run abi3audit --strict --report {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel} &&
            pipx run abi3audit --strict --report {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >
            copy {wheel} {dest_dir} &&
            pipx run abi3audit --strict --report {wheel}

      - uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.os }}"
          path: ./wheelhouse/*.whl
          retention-days: 1

  upload_pypi:
    name: Publish to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: release
    permissions:
        id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
