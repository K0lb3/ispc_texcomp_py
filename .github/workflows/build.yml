name: Build & Publish wheels

on: [push, pull_request]

jobs:
  fetch_ispc:
    # required to prevent getting blocked by github....
    runs-on: "ubuntu-20.04"

    steps:
      - uses: actions/setup-python@v3
    
      - name: "Fetch ISPC Compiler"
        run: |
          $releases = wget https://api.github.com/repos/ispc/ispc/releases | ConvertFrom-Json

          $windows_releases = $releases.assets | Where-Object -FilterScript {$_.name -like 'ispc-*-windows.zip'}
          wget -O windows.zip $windows_releases[0].browser_download_url
          mkdir ISPC/win
          unzip -p windows.zip ispc-*-windows/bin/ispc.exe > ISPC/win/ispc.exe

          $linux_releases = $release.assets | Where-Object -FilterScript {$_.name -like 'ispc-*-linux.tar.gz'}
          wget -O linux.tar.gz $linux_releases[0].browser_download_url
          tar -xvzf linux.tar.gz ispc-*-linux/bin/ispc
          mv ispc-*-linux/bin/ispc ISPC/linux/ispc
          rm linux.tar.gz

          $darwin_releases = $release.assets | Where-Object -FilterScript {$_.name -like 'ispc-*-macos.tar.gz'}
          wget -O darwin.tar.gz $darwin_releases[0].browser_download_url
          tar -xvzf mac.tar.gz ispc-*-macOS/bin/ispc
          mv ispc-*-macOS/bin/ispc ISPC/osx/ispc
          rm mac.tar.gz
        shell: pwsh
      
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ISPC_compilers
          path: ${{github.workspace}}/ISPC

  build_sdist:
    runs-on: "ubuntu-20.04"

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "True"

      - name: Download AssetStudioUtility artifact
        uses: actions/download-artifact@v2
        with:
          name: ISPC_compilers
          path: ${{github.workspace}}/ISPC

      - name: "Install Python3"
        uses: actions/setup-python@v3

      - name: "Install"
        run: pip install .

      - name: "Install test dependencies"
        run: pip install pytest texture2ddecoder imagehash

      - name: "Test"
        run: pytest -vs

      - name: "Build sdist"
        run: python setup.py sdist

  build_wheels:
    needs: [build_sdist]
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macOS-11]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "True"

      - name: Download AssetStudioUtility artifact
        uses: actions/download-artifact@v2
        with:
          name: ISPC_compilers
          path: ${{github.workspace}}/ISPC

      # Used to host cibuildwheel
      - uses: actions/setup-python@v3

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.11.3

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like:
        # env:
        #   CIBW_SOME_OPTION: value

      # - uses: actions/upload-artifact@v3
      #   with:
      #     path: ./wheelhouse/*.whl
